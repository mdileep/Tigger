#include "IVtblServer.h"   // IVtblServer.h is generated by mktyplib

#ifdef UNICODE
    #define FROM_OLE_STRING(str)  str
    #define TO_OLE_STRING(str)    str
    #define _tcsrchr              wcsrchr
    #define _tcsclen              wcslen
#else
    #define FROM_OLE_STRING(str)  ConvertToAnsi(str)
    char* ConvertToAnsi(OLECHAR * szW);  
    #define TO_OLE_STRING(str)    ConvertToUnicode(str)
    OLECHAR* ConvertToUnicode(char * szA);   
    // Maximum length of string that can be converted between Ansi & Unicode
    #define STRCONVERT_MAXLEN     300
    #define _tcsrchr              strrchr
    #define _tcsclen              strlen       
#endif

// MAX len of string table entries
#define STR_LEN   100
// Characters in string form of GUID, including '\0'
#define GUID_CCH  39

// String table constants 
#define IDS_Message         1     

// HRESULTs for the VtblServer Application. Custom interfaces which want to return 
// custom HRESULTs must return a FACILITY_ITF code. All the OLE-defined 
// FACILITY_ITF codes have a code value which lies in the region 0x0000-0x01FFF.
// While it is legal for the definer to use any code, it is highly recommended
// that only code values in the range 0x0200-0xFFFF be used, as this will reduce the
// possiblity of accidental confusion with any OLE-defined errors.
#define VTBLSERVER_E_FIRST       MAKE_SCODE(SEVERITY_ERROR, FACILITY_ITF, 0x0200)  
#define VTBLSERVER_E_UNEXPECTED  (VTBLSERVER_E_FIRST + 0x0) 
// Unexpected error   

// Function prototypes
BOOL Initialize ();
BOOL ProcessCmdLine(int argc, char *argv[], LPDWORD pdwRegisterCF);
void Uninitialize(DWORD dwRegisterCF);
BOOL RegisterServer(REFCLSID clsid, LPTSTR pszTypeLibrary);                  


class CVtblServer : public IVtblServer
{
public:
    // IUnknown methods 
    STDMETHOD(QueryInterface)(REFIID riid, void** ppvObj);
    STDMETHOD_(ULONG, AddRef)(void);
    STDMETHOD_(ULONG, Release)(void);
     
    // IVtblServer methods   
    STDMETHOD(put_Message)(BSTR bstrMessage);
    STDMETHOD(get_Message)(BSTR * pbstrMessage);
    STDMETHOD(DisplayMessage)(SAFEARRAY *psaCoord, short nTimes);  
    
    static HRESULT Create(LPTSTR lpszMessage, CVtblServer ** ppVtblServer); // Creates and intializes VtblServer object    
    CVtblServer();
    ~CVtblServer(); 
     
private:
    BSTR m_bstrMessage ;           // Message to be displayed
    ULONG m_cRef;                  // Reference count
    HANDLE m_hStdOut;              // Console handle   
};

class CVtblServerCF : public IClassFactory
{
public:
    // IUnknown methods 
    STDMETHOD(QueryInterface)(REFIID riid, void ** ppvObj);
    STDMETHOD_(ULONG, AddRef)(void);
    STDMETHOD_(ULONG, Release)(void); 
    
    // IClassFactory methods
    STDMETHOD(CreateInstance)(IUnknown * punkOuter, REFIID riid, 
                              void ** ppv);
    STDMETHOD(LockServer)(BOOL fLock);    
    
    CVtblServerCF();
    
private:
    ULONG m_cRef;                   // Reference count
};



     
                                             
