//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace imgsample {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ImagesDataSet : DataSet {
        
        private imageDataTable tableimage;
        
        public ImagesDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ImagesDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["image"] != null)) {
                    this.Tables.Add(new imageDataTable(ds.Tables["image"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public imageDataTable image {
            get {
                return this.tableimage;
            }
        }
        
        public override DataSet Clone() {
            ImagesDataSet cln = ((ImagesDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["image"] != null)) {
                this.Tables.Add(new imageDataTable(ds.Tables["image"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableimage = ((imageDataTable)(this.Tables["image"]));
            if ((this.tableimage != null)) {
                this.tableimage.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ImagesDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/ImagesDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableimage = new imageDataTable();
            this.Tables.Add(this.tableimage);
        }
        
        private bool ShouldSerializeimage() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void imageRowChangeEventHandler(object sender, imageRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class imageDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnimg_pk;
            
            private DataColumn columnimg_name;
            
            private DataColumn columnimg_desc;
            
            private DataColumn columnimg_dir;
            
            private DataColumn columnimg_full;
            
            private DataColumn columnimg_med;
            
            private DataColumn columnimg_thumb;
            
            private DataColumn columnimg_contenttype;
            
            private DataColumn columnimg_datepicturetaken;
            
            internal imageDataTable() : 
                    base("image") {
                this.InitClass();
            }
            
            internal imageDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn img_pkColumn {
                get {
                    return this.columnimg_pk;
                }
            }
            
            internal DataColumn img_nameColumn {
                get {
                    return this.columnimg_name;
                }
            }
            
            internal DataColumn img_descColumn {
                get {
                    return this.columnimg_desc;
                }
            }
            
            internal DataColumn img_dirColumn {
                get {
                    return this.columnimg_dir;
                }
            }
            
            internal DataColumn img_fullColumn {
                get {
                    return this.columnimg_full;
                }
            }
            
            internal DataColumn img_medColumn {
                get {
                    return this.columnimg_med;
                }
            }
            
            internal DataColumn img_thumbColumn {
                get {
                    return this.columnimg_thumb;
                }
            }
            
            internal DataColumn img_contenttypeColumn {
                get {
                    return this.columnimg_contenttype;
                }
            }
            
            internal DataColumn img_datepicturetakenColumn {
                get {
                    return this.columnimg_datepicturetaken;
                }
            }
            
            public imageRow this[int index] {
                get {
                    return ((imageRow)(this.Rows[index]));
                }
            }
            
            public event imageRowChangeEventHandler imageRowChanged;
            
            public event imageRowChangeEventHandler imageRowChanging;
            
            public event imageRowChangeEventHandler imageRowDeleted;
            
            public event imageRowChangeEventHandler imageRowDeleting;
            
            public void AddimageRow(imageRow row) 
			{
                this.Rows.Add(row);
            }
            
            public imageRow AddimageRow(string img_name, string img_desc, string img_dir, System.Byte[] img_full, System.Byte[] img_med, System.Byte[] img_thumb, string img_contenttype, System.DateTime img_datepicturetaken) {
                imageRow rowimageRow = ((imageRow)(this.NewRow()));
                rowimageRow.ItemArray = new object[] {
                        null,
                        img_name,
                        img_desc,
                        img_dir,
                        img_full,
                        img_med,
                        img_thumb,
                        img_contenttype,
                        img_datepicturetaken};
                this.Rows.Add(rowimageRow);
                return rowimageRow;
            }
            
            public imageRow FindByimg_pk(int img_pk) {
                return ((imageRow)(this.Rows.Find(new object[] {
                            img_pk})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                imageDataTable cln = ((imageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new imageDataTable();
            }
            
            internal void InitVars() {
                this.columnimg_pk = this.Columns["img_pk"];
                this.columnimg_name = this.Columns["img_name"];
                this.columnimg_desc = this.Columns["img_desc"];
                this.columnimg_dir = this.Columns["img_dir"];
                this.columnimg_full = this.Columns["img_full"];
                this.columnimg_med = this.Columns["img_med"];
                this.columnimg_thumb = this.Columns["img_thumb"];
                this.columnimg_contenttype = this.Columns["img_contenttype"];
                this.columnimg_datepicturetaken = this.Columns["img_datepicturetaken"];
            }
            
            private void InitClass() {
                this.columnimg_pk = new DataColumn("img_pk", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimg_pk);
                this.columnimg_name = new DataColumn("img_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimg_name);
                this.columnimg_desc = new DataColumn("img_desc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimg_desc);
                this.columnimg_dir = new DataColumn("img_dir", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimg_dir);
                this.columnimg_full = new DataColumn("img_full", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimg_full);
                this.columnimg_med = new DataColumn("img_med", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimg_med);
                this.columnimg_thumb = new DataColumn("img_thumb", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimg_thumb);
                this.columnimg_contenttype = new DataColumn("img_contenttype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimg_contenttype);
                this.columnimg_datepicturetaken = new DataColumn("img_datepicturetaken", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimg_datepicturetaken);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnimg_pk}, true));
                this.columnimg_pk.AutoIncrement = true;
                this.columnimg_pk.AllowDBNull = false;
                this.columnimg_pk.ReadOnly = true;
                this.columnimg_pk.Unique = true;
            }
            
            public imageRow NewimageRow() {
                return ((imageRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new imageRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(imageRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.imageRowChanged != null)) {
                    this.imageRowChanged(this, new imageRowChangeEvent(((imageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.imageRowChanging != null)) {
                    this.imageRowChanging(this, new imageRowChangeEvent(((imageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.imageRowDeleted != null)) {
                    this.imageRowDeleted(this, new imageRowChangeEvent(((imageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.imageRowDeleting != null)) {
                    this.imageRowDeleting(this, new imageRowChangeEvent(((imageRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveimageRow(imageRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class imageRow : DataRow {
            
            private imageDataTable tableimage;
            
            internal imageRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableimage = ((imageDataTable)(this.Table));
            }
            
            public int img_pk {
                get {
                    return ((int)(this[this.tableimage.img_pkColumn]));
                }
                set {
                    this[this.tableimage.img_pkColumn] = value;
                }
            }
            
            public string img_name {
                get {
                    try {
                        return ((string)(this[this.tableimage.img_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableimage.img_nameColumn] = value;
                }
            }
            
            public string img_desc {
                get {
                    try {
                        return ((string)(this[this.tableimage.img_descColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableimage.img_descColumn] = value;
                }
            }
            
            public string img_dir {
                get {
                    try {
                        return ((string)(this[this.tableimage.img_dirColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableimage.img_dirColumn] = value;
                }
            }
            
            public System.Byte[] img_full {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableimage.img_fullColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableimage.img_fullColumn] = value;
                }
            }
            
            public System.Byte[] img_med {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableimage.img_medColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableimage.img_medColumn] = value;
                }
            }
            
            public System.Byte[] img_thumb {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableimage.img_thumbColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableimage.img_thumbColumn] = value;
                }
            }
            
            public string img_contenttype {
                get {
                    try {
                        return ((string)(this[this.tableimage.img_contenttypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableimage.img_contenttypeColumn] = value;
                }
            }
            
            public System.DateTime img_datepicturetaken {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableimage.img_datepicturetakenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableimage.img_datepicturetakenColumn] = value;
                }
            }
            
            public bool Isimg_nameNull() {
                return this.IsNull(this.tableimage.img_nameColumn);
            }
            
            public void Setimg_nameNull() {
                this[this.tableimage.img_nameColumn] = System.Convert.DBNull;
            }
            
            public bool Isimg_descNull() {
                return this.IsNull(this.tableimage.img_descColumn);
            }
            
            public void Setimg_descNull() {
                this[this.tableimage.img_descColumn] = System.Convert.DBNull;
            }
            
            public bool Isimg_dirNull() {
                return this.IsNull(this.tableimage.img_dirColumn);
            }
            
            public void Setimg_dirNull() {
                this[this.tableimage.img_dirColumn] = System.Convert.DBNull;
            }
            
            public bool Isimg_fullNull() {
                return this.IsNull(this.tableimage.img_fullColumn);
            }
            
            public void Setimg_fullNull() {
                this[this.tableimage.img_fullColumn] = System.Convert.DBNull;
            }
            
            public bool Isimg_medNull() {
                return this.IsNull(this.tableimage.img_medColumn);
            }
            
            public void Setimg_medNull() {
                this[this.tableimage.img_medColumn] = System.Convert.DBNull;
            }
            
            public bool Isimg_thumbNull() {
                return this.IsNull(this.tableimage.img_thumbColumn);
            }
            
            public void Setimg_thumbNull() {
                this[this.tableimage.img_thumbColumn] = System.Convert.DBNull;
            }
            
            public bool Isimg_contenttypeNull() {
                return this.IsNull(this.tableimage.img_contenttypeColumn);
            }
            
            public void Setimg_contenttypeNull() {
                this[this.tableimage.img_contenttypeColumn] = System.Convert.DBNull;
            }
            
            public bool Isimg_datepicturetakenNull() {
                return this.IsNull(this.tableimage.img_datepicturetakenColumn);
            }
            
            public void Setimg_datepicturetakenNull() {
                this[this.tableimage.img_datepicturetakenColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class imageRowChangeEvent : EventArgs {
            
            private imageRow eventRow;
            
            private DataRowAction eventAction;
            
            public imageRowChangeEvent(imageRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public imageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
